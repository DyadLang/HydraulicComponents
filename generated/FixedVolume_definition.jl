### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


"""
   FixedVolume(; name, p0, vol)

Fixed fluid volume.

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `p0`         | Initial pressure                         | Pa  |    |
| `vol`         |                          | m3  |    |

## Connectors

 * `port` - ([`Port`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `rho`         |                          | kg/m3  | 
| `m`         |                          | kg  | 
| `p`         |                          | Pa  | 
"""
@component function FixedVolume(; name, p0=nothing, vol=nothing, continuity__graph0)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (p0::Float64 = p0), [description = "Initial pressure"])
  append!(__params, @parameters (vol::Float64 = vol))
  append!(__params, @parameters (port__medium::AbstractMedium = continuity__graph0))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (rho(t)))
  append!(__vars, @variables (m(t)))
  append!(__vars, @variables (p(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named port = HydraulicComponents.Port())

  ### Defaults
  __defaults = Dict()
  __defaults[p] = (p0)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, rho ~ density(port__medium, p))
  push!(__eqs, m ~ rho * vol)
  push!(__eqs, port.m_flow ~ D(m))
  push!(__eqs, port.p ~ p)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export FixedVolume

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(FixedVolume)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
