### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


"""
   TubeBase(; name, area, length, perimeter, shape_factor, head_factor, add_inertia, m_flow0)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `area`         |                          | m2  |    |
| `length`         |                          | m  |    |
| `perimeter`         |                          | m  |    |
| `shape_factor`         |                          | --  |    |
| `head_factor`         |                          | --  |    |
| `add_inertia`         |                          | --  |   false |
| `m_flow0`         |                          | kg/s  |    |

## Connectors

 * `port_a` - ([`Port`](@ref))
 * `port_b` - ([`Port`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `Δp`         |                          | Pa  | 
| `m_flow`         |                          | kg/s  | 
| `rho`         |                          | kg/m3  | 
| `mu`         |                          | Pa.s  | 
| `velocity`         |                          | m/s  | 
| `sheer`         |                          | Pa  | 
| `ff`         |                          | --  | 
"""
@component function TubeBase(; name, area=nothing, length=nothing, perimeter=nothing, shape_factor=nothing, head_factor=nothing, add_inertia=false, m_flow0=nothing, continuity__graph0)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (area::Float64 = area))
  append!(__params, @parameters (length::Float64 = length))
  append!(__params, @parameters (perimeter::Float64 = perimeter))
  append!(__params, @parameters (shape_factor::Float64 = shape_factor))
  append!(__params, @parameters (head_factor::Float64 = head_factor))
  append!(__params, @parameters (add_inertia::Bool = add_inertia))
  append!(__params, @parameters (d_h::Float64 = 4 * area / perimeter))
  append!(__params, @parameters (m_flow0::Float64 = m_flow0))
  append!(__params, @parameters (port_a__medium::AbstractMedium = continuity__graph0))
  append!(__params, @parameters (port_b__medium::AbstractMedium = continuity__graph0))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (Δp(t)))
  append!(__vars, @variables (m_flow(t)))
  append!(__vars, @variables (rho(t)))
  append!(__vars, @variables (mu(t)))
  append!(__vars, @variables (velocity(t)))
  append!(__vars, @variables (sheer(t)))
  append!(__vars, @variables (ff(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named port_a = HydraulicComponents.Port())
  push!(__systems, @named port_b = HydraulicComponents.Port())

  ### Defaults
  __defaults = Dict()
  __defaults[m_flow] = (m_flow0)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, port_a.m_flow + port_b.m_flow ~ 0)
  push!(__eqs, Δp ~ port_a.p - port_b.p)
  push!(__eqs, rho ~ density(port_a__medium, port_a.p))
  push!(__eqs, mu ~ viscosity(port_a__medium))
  push!(__eqs, velocity ~ m_flow / (rho * area))
  push!(__eqs, ff ~ friction_factor(m_flow, area, d_h, mu, shape_factor))
  push!(__eqs, sheer ~ 0.5 * rho * reg_pow(velocity, 2) * ff * head_factor * (length / d_h))
  push!(__eqs, Δp ~ ifelse(add_inertia, sheer + (length / area) * D(m_flow), sheer))
  push!(__eqs, m_flow ~ port_a.m_flow)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export TubeBase

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(TubeBase)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
