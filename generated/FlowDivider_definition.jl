### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


"""
   FlowDivider(; name, n)

Reduces the flow from `port_a` to `port_b` by `n`. Useful for modeling parallel
tubes efficiently by placing a `FlowDivider` on each end of a tube.
Extra flow is dumped into an `open` port.

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `n`         | Divide flow from `port_a` to `port_b` by `n`                         | --  |    |

## Connectors

 * `port_a` - ([`Port`](@ref))
 * `port_b` - ([`Port`](@ref))
 * `open` - ([`Port`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `m_flow_a`         | Mass flow of `port_a`                         | kg/s  | 
| `m_flow_b`         | Mass flow of `port_b`                         | kg/s  | 
"""
@component function FlowDivider(; name, n=nothing, continuity__graph0)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (n::Float64 = n), [description = "Divide flow from `port_a` to `port_b` by `n`"])
  append!(__params, @parameters (port_a__medium::AbstractMedium = continuity__graph0))
  append!(__params, @parameters (port_b__medium::AbstractMedium = continuity__graph0))
  append!(__params, @parameters (open__medium::AbstractMedium = continuity__graph0))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (m_flow_a(t)), [description = "Mass flow of `port_a`"])
  append!(__vars, @variables (m_flow_b(t)), [description = "Mass flow of `port_b`"])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named port_a = HydraulicComponents.Port())
  push!(__systems, @named port_b = HydraulicComponents.Port())
  push!(__systems, @named open = HydraulicComponents.Port())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, m_flow_a ~ port_a.m_flow)
  push!(__eqs, m_flow_b ~ port_b.m_flow)
  push!(__eqs, m_flow_b ~ m_flow_a / n)
  push!(__eqs, open.m_flow ~ m_flow_a - m_flow_b)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export FlowDivider

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(FlowDivider)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
